from main import *
def find_key(v):
    global D_question_tfidf
    for k, val in D_question_tfidf.items():
        if v == val:
            return k

def document_pertinent(matrice_TF_IDF,matrice_question,dossier):
    matrice_TF_IDF=transposée(matrice_TF_IDF)
    L_simi=[]
    for ligne in matrice_TF_IDF:
        L_simi.append(similarité(ligne,matrice_question))
    for indice, valeur in enumerate(L_simi):
        if valeur == max(L_simi):
            indice_max = indice
            maxi = valeur
    nom=clean_vers_normale(dossier[indice_max])
    return nom

def réponse(question):

    global D_question_tfidf
    # Trouver le mot avec le score TF-IDF le plus élevé
    vec_tf_idf = vecteur_TF_IDF_question(question)

    indice_max_tfidf = max(range(len(vec_tf_idf)), key=vec_tf_idf.__getitem__)
    # Récupérer le mot avec le score TF-IDF le plus élevé
    mot_max_tfidf = find_key(indice_max_tfidf)

    # Supposons que vous ayez déjà le document pertinent retourné dans l'étape 5 sous forme de chaîne de caractères.
    doc_pertinent = document_pertinent(Matrice_TF_IDF,Matrice_question,"cleaned")

    # Trouver la première occurrence du mot dans le document
    indice_occurrence = doc_pertinent.find(mot_max_tfidf)

    # Trouver la phrase qui contient le mot
    debut_phrase = doc_pertinent.rfind(".", 0, indice_occurrence) + 1
    fin_phrase = doc_pertinent.find(".", indice_occurrence)

    # Extraire la phrase
    phrase_contenant_mot = document_pertinent[debut_phrase:fin_phrase].strip()

    # Afficher la phrase résultante
    print("La phrase contenant le mot avec le TF-IDF le plus élevé est :", phrase_contenant_mot)

réponse("Peux-tu me dire comment une nation prend-elle soin du climat ?")